{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akash\\\\music-app-bc\\\\frontend\\\\src\\\\context\\\\TransactionContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from 'ethers';\nimport { contractABI, contractAddress } from \"../utilities/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/React.createContext();\nconst {\n  ethereum\n} = window;\n\nconst createEthereumContract = () => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSigner();\n  const transactionsContract = new ethers.Contract(contractAddress, contractABI, signer);\n  console.log({\n    provider,\n    signer,\n    transactionsContract\n  }); // return transactionsContract;\n};\n\nexport const TransactionsProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [formData, setFormData] = useState({\n    addressTo: \"\",\n    amount: \"\",\n    keyword: \"\",\n    message: \"\"\n  });\n\n  function handleChange(e, name) {\n    // setFormData(prevState=>({...prevState,[name]:e.target.value,}));\n    var k = {\n      addressTo: \"\",\n      amount: \"\",\n      keyword: \"\",\n      message: \"\"\n    };\n    k[name] = e.target.value;\n    console.log(k);\n    setFormData(k);\n  }\n\n  const CheckIfWalletIsConnected = async () => {\n    try {\n      if (!ethereum) return alert(\"Please install MetaMask\");\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n\n      if (accounts.length) {\n        setCurrentAccount(accounts[0]);\n      } else {\n        console.log(\"No accounts found!\");\n      }\n    } catch (err) {\n      console.log(err);\n      throw new Error('No ethereum object');\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      if (!ethereum) return alert(\"Please install MetaMask\");\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n      throw new Error('No ethereum object');\n    }\n  };\n\n  const sendTransaction = async () => {\n    try {\n      if (!ethereum) return alert(\"Please install MetaMask\");\n      createEthereumContract();\n    } catch (err) {\n      console.log(err);\n      throw new Error('No ethereum object');\n    }\n  };\n\n  useEffect(() => {\n    CheckIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      connectWallet,\n      currentAccount,\n      sendTransaction,\n      formData,\n      handleChange,\n      setFormData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this); // const [formData, setformData] = useState({ addressTo: \"\", amount: \"\", keyword: \"\", message: \"\" });\n  // const [currentAccount, setCurrentAccount] = useState(\"\");\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [transactionCount, setTransactionCount] = useState(localStorage.getItem(\"transactionCount\"));\n  // const [transactions, setTransactions] = useState([]);\n  // const handleChange = (e, name) => {\n  //   setformData((prevState) => ({ ...prevState, [name]: e.target.value }));\n};\n\n_s(TransactionsProvider, \"UmvVz+I9Jy287/T1Z0eJhQFWADs=\");\n\n_c = TransactionsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"sources":["C:/Users/akash/music-app-bc/frontend/src/context/TransactionContext.jsx"],"names":["React","useEffect","useState","ethers","contractABI","contractAddress","TransactionContext","createContext","ethereum","window","createEthereumContract","provider","providers","Web3Provider","signer","getSigner","transactionsContract","Contract","console","log","TransactionsProvider","children","currentAccount","setCurrentAccount","formData","setFormData","addressTo","amount","keyword","message","handleChange","e","name","k","target","value","CheckIfWalletIsConnected","alert","accounts","request","method","length","err","Error","connectWallet","error","sendTransaction"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {ethers} from 'ethers';\r\nimport { contractABI, contractAddress } from \"../utilities/constants\";\r\n\r\nexport const TransactionContext = React.createContext();\r\nconst { ethereum } = window;\r\n\r\nconst createEthereumContract = () => {\r\n    const provider = new ethers.providers.Web3Provider(ethereum);\r\n    const signer = provider.getSigner();\r\n    const transactionsContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n  \r\n    console.log({provider, signer, transactionsContract});\r\n    // return transactionsContract;\r\n  };\r\n\r\n  export const TransactionsProvider = ({ children }) => {\r\n\r\n    const [currentAccount, setCurrentAccount] = useState(\"\");\r\n    const [formData, setFormData] = useState({addressTo:\"\",amount:\"\",keyword:\"\",message:\"\"})\r\n\r\n\r\n    function handleChange(e,name){\r\n        // setFormData(prevState=>({...prevState,[name]:e.target.value,}));\r\n        var k = {addressTo:\"\",amount:\"\",keyword:\"\",message:\"\"};\r\n        k[name] = e.target.value;\r\n        console.log(k);\r\n        setFormData(k);\r\n    }\r\n\r\n    const CheckIfWalletIsConnected = async ()=>{\r\n\r\n        try{\r\n\r\n            if(!ethereum) return alert(\"Please install MetaMask\");\r\n    \r\n            const accounts = await ethereum.request({method: 'eth_accounts'});\r\n    \r\n            if(accounts.length){\r\n                setCurrentAccount(accounts[0]);\r\n            }else{\r\n                console.log(\"No accounts found!\");\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            throw new Error('No ethereum object');\r\n        }\r\n    }\r\n\r\n    const connectWallet = async ()=>{\r\n        try{\r\n            if(!ethereum) return alert(\"Please install MetaMask\");\r\n            const accounts = await ethereum.request({method: 'eth_requestAccounts'});\r\n            setCurrentAccount(accounts[0]);\r\n        }catch(error){\r\n            console.log(error);\r\n            throw new Error('No ethereum object');\r\n\r\n        }\r\n    }\r\n\r\n    const sendTransaction = async ()=>{\r\n        try{\r\n            if(!ethereum) return alert(\"Please install MetaMask\");\r\n            createEthereumContract();\r\n\r\n        }catch(err){\r\n            console.log(err);\r\n            throw new Error('No ethereum object');\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        CheckIfWalletIsConnected();\r\n    },[])\r\n\r\n\r\n    return(\r\n    <TransactionContext.Provider  value={{ connectWallet, currentAccount, sendTransaction,formData,handleChange,setFormData}}>\r\n        {children}\r\n    </TransactionContext.Provider>\r\n    );\r\n    // const [formData, setformData] = useState({ addressTo: \"\", amount: \"\", keyword: \"\", message: \"\" });\r\n    // const [currentAccount, setCurrentAccount] = useState(\"\");\r\n    // const [isLoading, setIsLoading] = useState(false);\r\n    // const [transactionCount, setTransactionCount] = useState(localStorage.getItem(\"transactionCount\"));\r\n    // const [transactions, setTransactions] = useState([]);\r\n  \r\n    // const handleChange = (e, name) => {\r\n    //   setformData((prevState) => ({ ...prevState, [name]: e.target.value }));\r\n    };"]},"metadata":{},"sourceType":"module"}