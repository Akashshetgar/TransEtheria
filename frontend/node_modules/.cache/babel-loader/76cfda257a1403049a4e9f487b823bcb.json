{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akash\\\\music-app-bc\\\\frontend\\\\src\\\\context\\\\TransactionContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from 'ethers';\nimport { contractABI, contractAddress } from \"../utilities/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/React.createContext();\nconst {\n  ethereum\n} = window;\n\nconst createEthereumContract = () => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSigner();\n  const transactionsContract = new ethers.Contract(contractAddress, contractABI, signer);\n  console.log({\n    provider,\n    signer,\n    transactionsContract\n  }); // return transactionsContract;\n};\n\nexport const TransactionsProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const CheckIfWalletIsConnected = async () => {\n    if (!ethereum) return alert(\"Please install MetaMask\");\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    if (accounts.length) console.log(accounts);\n  };\n\n  const connectWallet = async () => {\n    try {\n      if (!ethereum) return alert(\"Please install MetaMask\");\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n      throw new Error('No ethereum object');\n    }\n  };\n\n  useEffect(() => {\n    CheckIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      connectWallet\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this); // const [formData, setformData] = useState({ addressTo: \"\", amount: \"\", keyword: \"\", message: \"\" });\n  // const [currentAccount, setCurrentAccount] = useState(\"\");\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [transactionCount, setTransactionCount] = useState(localStorage.getItem(\"transactionCount\"));\n  // const [transactions, setTransactions] = useState([]);\n  // const handleChange = (e, name) => {\n  //   setformData((prevState) => ({ ...prevState, [name]: e.target.value }));\n};\n\n_s(TransactionsProvider, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = TransactionsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"sources":["C:/Users/akash/music-app-bc/frontend/src/context/TransactionContext.jsx"],"names":["React","useEffect","useState","ethers","contractABI","contractAddress","TransactionContext","createContext","ethereum","window","createEthereumContract","provider","providers","Web3Provider","signer","getSigner","transactionsContract","Contract","console","log","TransactionsProvider","children","currentAccount","setCurrentAccount","CheckIfWalletIsConnected","alert","accounts","request","method","length","connectWallet","error","Error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,wBAA7C;;AAEA,OAAO,MAAMC,kBAAkB,gBAAGN,KAAK,CAACO,aAAN,EAA3B;AACP,MAAM;AAAEC,EAAAA;AAAF,IAAeC,MAArB;;AAEA,MAAMC,sBAAsB,GAAG,MAAM;AACjC,QAAMC,QAAQ,GAAG,IAAIR,MAAM,CAACS,SAAP,CAAiBC,YAArB,CAAkCL,QAAlC,CAAjB;AACA,QAAMM,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,QAAMC,oBAAoB,GAAG,IAAIb,MAAM,CAACc,QAAX,CAAoBZ,eAApB,EAAqCD,WAArC,EAAkDU,MAAlD,CAA7B;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACR,IAAAA,QAAD;AAAWG,IAAAA,MAAX;AAAmBE,IAAAA;AAAnB,GAAZ,EALiC,CAMjC;AACD,CAPH;;AASE,OAAO,MAAMI,oBAAoB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAEpD,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCrB,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMsB,wBAAwB,GAAG,YAAU;AACvC,QAAG,CAAChB,QAAJ,EAAc,OAAOiB,KAAK,CAAC,yBAAD,CAAZ;AAEd,UAAMC,QAAQ,GAAG,MAAMlB,QAAQ,CAACmB,OAAT,CAAiB;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAjB,CAAvB;AAEA,QAAGF,QAAQ,CAACG,MAAZ,EACAX,OAAO,CAACC,GAAR,CAAYO,QAAZ;AACH,GAPD;;AASA,QAAMI,aAAa,GAAG,YAAU;AAC5B,QAAG;AACC,UAAG,CAACtB,QAAJ,EAAc,OAAOiB,KAAK,CAAC,yBAAD,CAAZ;AACd,YAAMC,QAAQ,GAAG,MAAMlB,QAAQ,CAACmB,OAAT,CAAiB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAjB,CAAvB;AACAL,MAAAA,iBAAiB,CAACG,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACH,KAJD,CAIC,OAAMK,KAAN,EAAY;AACTb,MAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACA,YAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AAEH;AACJ,GAVD;;AAWA/B,EAAAA,SAAS,CAAC,MAAI;AACVuB,IAAAA,wBAAwB;AAC3B,GAFQ,EAEP,EAFO,CAAT;AAKA,sBACA,QAAC,kBAAD,CAAoB,QAApB;AAA8B,IAAA,KAAK,EAAE;AAAEM,MAAAA;AAAF,KAArC;AAAA,cACKT;AADL;AAAA;AAAA;AAAA;AAAA,UADA,CA7BoD,CAkCpD;AACA;AACA;AACA;AACA;AAEA;AACA;AACC,CA1CI;;GAAMD,oB;;KAAAA,oB","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {ethers} from 'ethers';\r\nimport { contractABI, contractAddress } from \"../utilities/constants\";\r\n\r\nexport const TransactionContext = React.createContext();\r\nconst { ethereum } = window;\r\n\r\nconst createEthereumContract = () => {\r\n    const provider = new ethers.providers.Web3Provider(ethereum);\r\n    const signer = provider.getSigner();\r\n    const transactionsContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n  \r\n    console.log({provider, signer, transactionsContract});\r\n    // return transactionsContract;\r\n  };\r\n\r\n  export const TransactionsProvider = ({ children }) => {\r\n\r\n    const [currentAccount, setCurrentAccount] = useState(\"\");\r\n\r\n    const CheckIfWalletIsConnected = async ()=>{\r\n        if(!ethereum) return alert(\"Please install MetaMask\");\r\n\r\n        const accounts = await ethereum.request({method: 'eth_accounts'});\r\n\r\n        if(accounts.length)\r\n        console.log(accounts);\r\n    }\r\n\r\n    const connectWallet = async ()=>{\r\n        try{\r\n            if(!ethereum) return alert(\"Please install MetaMask\");\r\n            const accounts = await ethereum.request({method: 'eth_requestAccounts'});\r\n            setCurrentAccount(accounts[0]);\r\n        }catch(error){\r\n            console.log(error);\r\n            throw new Error('No ethereum object');\r\n\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        CheckIfWalletIsConnected();\r\n    },[])\r\n\r\n\r\n    return(\r\n    <TransactionContext.Provider  value={{ connectWallet}}>\r\n        {children}\r\n    </TransactionContext.Provider>\r\n    );\r\n    // const [formData, setformData] = useState({ addressTo: \"\", amount: \"\", keyword: \"\", message: \"\" });\r\n    // const [currentAccount, setCurrentAccount] = useState(\"\");\r\n    // const [isLoading, setIsLoading] = useState(false);\r\n    // const [transactionCount, setTransactionCount] = useState(localStorage.getItem(\"transactionCount\"));\r\n    // const [transactions, setTransactions] = useState([]);\r\n  \r\n    // const handleChange = (e, name) => {\r\n    //   setformData((prevState) => ({ ...prevState, [name]: e.target.value }));\r\n    };"]},"metadata":{},"sourceType":"module"}